{"version":3,"sources":["components/App/locales/locale_en_custom.js","components/App/App.js","reportWebVitals.js","index.js","services/orthodoxFastingAPI.js"],"names":["locale_en_custom","months","weekDays","name","short","isWeekend","weekStartingIndex","getToday","gregorainTodayObject","toNativeDate","date","Date","year","month","day","getMonthLength","getDate","transformDigit","digit","nextMonth","previousMonth","openMonthSelector","openYearSelector","closeMonthSelector","closeYearSelector","defaultPlaceholder","from","to","digitSeparator","yearLetterSkip","isRtl","FastingAPIResponse","lazy","App","useReducer","state","defaultValue","utils","useState","selectedDay","setSelectedDay","customDate","toISOString","slice","fastingAPIMonthResponse","setFastingAPIMonthResponse","useEffect","mounted","getFastingAPIMonthResponse","then","data","customDaysArray","statusArray","daysArray","console","log","i","length","dayStatus","parseInt","the_date","status","push","customDatesTransformation","className","value","onChange","minimumDate","maximumDate","colorPrimary","colorPrimaryLight","calendarClassName","calendarTodayClassName","shouldHighlightWeekends","locale","customDaysClassName","style","display","justifyContent","padding","fallback","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","getFastingAPIResponse","inputDate","fetch","json"],"mappings":"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","file":"static/js/main.b48bcd36.chunk.js","sourcesContent":["export const locale_en_custom = {\n    // months list by order\n    months: [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n    ],\n\n    // week days by order\n    weekDays: [\n        {\n            name: 'Sunday', // used for accessibility \n            short: 'S', // displayed at the top of days' rows\n            isWeekend: true, // is it a formal weekend or not?\n        },\n        {\n            name: 'Monday',\n            short: 'M',\n        },\n        {\n            name: 'Tuesday',\n            short: 'T',\n        },\n        {\n            name: 'Wednesday',\n            short: 'W',\n        },\n        {\n            name: 'Thursday',\n            short: 'T',\n        },\n        {\n            name: 'Friday',\n            short: 'F',\n        },\n        {\n            name: 'Saturday',\n            short: 'S',\n            isWeekend: true,\n        },\n    ],\n\n    // just play around with this number between 0 and 6\n    weekStartingIndex: 0,\n\n    // return a { year: number, month: number, day: number } object\n    getToday(gregorainTodayObject) {\n        return gregorainTodayObject;\n    },\n\n    // return a native JavaScript date here\n    toNativeDate(date) {\n        return new Date(date.year, date.month - 1, date.day);\n    },\n\n    // return a number for date's month length\n    getMonthLength(date) {\n        return new Date(date.year, date.month, 0).getDate();\n    },\n\n    // return a transformed digit to your locale\n    transformDigit(digit) {\n        return digit;\n    },\n\n    // texts in the date picker\n    nextMonth: 'Next Month',\n    previousMonth: 'Previous Month',\n    openMonthSelector: 'Open Month Selector',\n    openYearSelector: 'Open Year Selector',\n    closeMonthSelector: 'Close Month Selector',\n    closeYearSelector: 'Close Year Selector',\n    defaultPlaceholder: 'Select...',\n\n    // for input range value\n    from: 'from',\n    to: 'to',\n\n\n    // used for input value when multi dates are selected\n    digitSeparator: ',',\n\n    // if your provide -2 for example, year will be 2 digited\n    yearLetterSkip: 0,\n\n    // is your language rtl or ltr?\n    isRtl: false,\n}\n","\nimport React, { lazy, Suspense, useReducer, useState, useEffect } from 'react';\nimport './App.css';\n\n/* To Do:\n- move text message functions in a service\n- move text message to the calendar footer or style it correctly\n- make switching the Month/Year call month API\n- limit month API only to month/year change\n- color-coded agenda (try MDIs)\n- handle errors on the api request\n- bulgarian localization\n- set footer styling\n*/\n\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport \"./App.css\";\nimport { locale_en_custom } from \"./locales/locale_en_custom\";\nimport { Calendar } from \"react-modern-calendar-datepicker\";\nimport { utils } from 'react-modern-calendar-datepicker';\nimport { getFastingAPIMonthResponse } from '../../services/orthodoxFastingAPI';\n\nconst FastingAPIResponse = lazy(() => import(/* webpackChunkName: \"FastingAPIResponse\"*/'../FastingAPIResponse/FastingAPIResponse'));\nconst formReducer = (state, event) => {\n  return {\n    ...state,\n    [event.name]: event.value\n  }\n}\nfunction customDatesTransformation(statusArray) {\n  let daysArray = [];\n  console.log('customDatesTransformation has just been called');\n  for (var i = 0; i < statusArray.length; i++) {\n    let dayStatus = {\n      \"year\": parseInt(statusArray[i].the_date.slice(0, 4)),\n      \"month\": parseInt(statusArray[i].the_date.slice(5, 7)),\n      \"day\": parseInt(statusArray[i].the_date.slice(-2)),\n      \"className\": 'status' + statusArray[i].status\n    }\n    daysArray.push(dayStatus);\n  }\n  return daysArray;\n}\n\nfunction App() {\n\n  const [show, toggle] = useReducer(state => !state, true);\n\n  const defaultValue = utils().getToday();\n\n  const [selectedDay, setSelectedDay] = useState(defaultValue);\n\n  const minimumDate = {\n    year: 1582,\n    month: 1,\n    day: 1\n  };\n\n  const maximumDate = {\n    year: 2199,\n    month: 12,\n    day: 31\n  }\n\n\n  // why is this valid??\n  const customDate = new Date(selectedDay.year, selectedDay.month - 1, selectedDay.day + 1).toISOString().slice(0, 10);\n\n  const [fastingAPIMonthResponse, setFastingAPIMonthResponse] = useState({});\n\n  useEffect(() => {\n    let mounted = true;\n    getFastingAPIMonthResponse(customDate)\n      .then(data => {\n        if (mounted) {\n          setFastingAPIMonthResponse(data)\n        }\n      }\n      );\n    return () => {\n      mounted = false;\n    }\n  }, [selectedDay])\n\n\n\n  const customDaysArray = customDatesTransformation(fastingAPIMonthResponse);\n\n\n  return (\n    <div className='App'>\n      <header className=\"App-header\">\n        <div className=\"wrapper\">\n          <h3> Fasting Diet</h3>\n          <h4>Please pick a date:</h4>\n          <Calendar\n            value={selectedDay}\n            onChange={setSelectedDay}\n            minimumDate={minimumDate}\n            maximumDate={maximumDate}\n            colorPrimary=\"#0fbcf9\" // added this\n            colorPrimaryLight=\"rgba(75, 207, 250, 0.4)\" // and this\n            calendarClassName=\"fasting-calendar\" // and this\n            calendarTodayClassName=\"custom-today-day\" // also this\n            shouldHighlightWeekends\n            locale={locale_en_custom} // custom locale object\n            customDaysClassName={customDaysArray}\n          />\n\n        </div>\n        <div className='App-statusMessage' style={{ display: 'flex', justifyContent: 'center', padding: '1rem 2rem' }}>      <Suspense fallback={<div>Calculating...</div>}>\n          {\n            <FastingAPIResponse date={selectedDay.year + '-' + selectedDay.month + '-' + selectedDay.day} />\n          }\n        </Suspense></div>\n      </header>\n      <footer className='App-footer'>\n        <a href='https://github.com/ddppddpp/bgchof'>Read more </a>\n      </footer>\n    </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const dayAPIuri = 'https://mqev24rwub.execute-api.eu-central-1.amazonaws.com/dev/fastingStatus/date?inputDate=';\nconst monthAPIuri = 'https://mqev24rwub.execute-api.eu-central-1.amazonaws.com/dev/fastingStatus/month?inputDate='\n\nconst fixed_responses = {\n    '2022-01-27': {\n        \"the_date\": \"2022-01-27\",\n        \"status\": 6\n    },\n    '2022-01-26': {\n        \"the_date\": \"2022-01-26\",\n        \"status\": 4\n    },\n    '2022-01-25': {\n        \"the_date\": \"2022-01-25\",\n        \"status\": 6\n    },\n    '2022-01-28': {\n        \"the_date\": \"2022-01-28\",\n        \"status\": 4\n    }\n}\n\n/*export async function getFastingAPIResponse(inputDate) {\n    return new Promise((resolve) => {\n        //const response = fetch(uri + inputDate);\n        // const data = response.json();\n\n        setTimeout(() => {\n            resolve(\n                fixed_responses[inputDate])\n        }, 1500)\n    })\n}*/\n\nexport function getFastingAPIResponse(inputDate) {\n    return fetch(dayAPIuri + inputDate)\n        .then(data => data.json())\n}\nexport function getFastingAPIMonthResponse(inputDate) {\n    console.log('getFsatingAPIMonthResponse has just been called');\n    return fetch(monthAPIuri + inputDate).then(data => data.json())\n\n}"],"sourceRoot":""}